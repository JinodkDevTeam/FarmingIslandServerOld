<?php

namespace NgLamVN\SmartMine;

use pocketmine\block\Block;
use pocketmine\event\block\BlockPlaceEvent;
use pocketmine\event\Listener;
use pocketmine\level\particle\DestroyBlockParticle;
use pocketmine\level\Position;
use pocketmine\math\Vector3;
use pocketmine\plugin\PluginBase;
use pocketmine\event\block\BlockBreakEvent;
class Loader extends PluginBase implements Listener
{
    public const WORLD = "mine";
    public const ALLOW_BLOCK = [
        Block::STONE,
        Block::COBBLESTONE,
        Block::COAL_ORE,
        Block::IRON_ORE,
        Block::GOLD_ORE,
        Block::DIAMOND_ORE,
        Block::EMERALD_ORE,
        Block::REDSTONE_ORE,
        Block::GLOWING_REDSTONE_ORE,
        Block::QUARTZ_ORE,
        Block::LAPIS_ORE
        ];

    /** @var Position[] */
    public $queue = [];
    /** @var int[] */
    public $data = [];
    /** @var bool */
    public $is_edit = false;

    public function onEnable()
    {
        parent::onEnable(); // TODO: Change the autogenerated stub

        $this->getServer()->getPluginManager()->registerEvents($this, $this);
        $this->getScheduler()->scheduleRepeatingTask(new ResetTask($this), 200);
    }

    public function onDisable()
    {
        $this->onReset();
    }

    /**
     * @param BlockBreakEvent $event
     * @priority LOW
     */
    public function onBreak(BlockBreakEvent $event)
    {
        if ($event->isCancelled())
        {
            return;
        }
        if ($this->is_edit)
        {
            return;
        }
        $block = $event->getBlock();
        if ($block->getLevel()->getName() !== self::WORLD)
        {
            return;
        }
        if (!in_array($block->getId(), self::ALLOW_BLOCK))
        {
            $event->setCancelled();
            return;
        }
        $drops = $event->getDrops();
        foreach ($drops as $drop)
        {
            $event->getPlayer()->getInventory()->addItem($drop);
        }
        $event->setCancelled();
        $pos = $block->asPosition();
        $pos->getLevel()->addParticle(new DestroyBlockParticle($block->add(0.5, 0.5, 0.5), $block));
        $event->getItem()->onDestroyBlock($block);

        if ($block->getId() == Block::COBBLESTONE)
        {
            if ($this->getBlockData($pos->asVector3()) == null)
            {
                $this->setBlockData($pos->asVector3(), $block->getId());
                $this->AddToQueue($pos);
                $pos->getLevel()->setBlock($pos->asVector3(), Block::get(Block::BEDROCK));
                return;
            }
            $pos->getLevel()->setBlock($pos->asVector3(), Block::get(Block::BEDROCK));
            return;
        }

        $this->setBlockData($pos->asVector3(), $block->getId());
        $pos->getLevel()->setBlock($pos->asVector3(), Block::get(Block::COBBLESTONE));
        $this->AddToQueue($pos);
    }

    public function onPlace (BlockPlaceEvent $event)
    {
        if ($event->isCancelled())
        {
            return;
        }
        if ($this->is_edit)
        {
            return;
        }
        $block = $event->getBlock();
        if ($block->getLevel()->getName() !== self::WORLD)
        {
            return;
        }
        $event->setCancelled();
    }

    public function AddToQueue (Position $pos)
    {
        array_push($this->queue, $pos);
    }

    public function ClearQueue()
    {
        $this->queue = [];
    }

    public function getBlockData (Vector3 $vector3): ?int
    {
        if (isset($this->data[$vector3->getX() ."-". $vector3->getY() ."-". $vector3->getZ()]))
        {
            return $this->data[$vector3->getX() ."-". $vector3->getY() ."-". $vector3->getZ()];
        }
        return null;
    }
    public function setBlockData (Vector3 $vector3, int $data)
    {
        $this->data[$vector3->getX() ."-". $vector3->getY() ."-". $vector3->getZ()] = $data;
    }
    public function removeBlockData (Vector3 $vector3)
    {
        unset($this->data[$vector3->getX() ."-". $vector3->getY() ."-". $vector3->getZ()]);
        if (!isset($this->data))
        {
            $this->data = [];
        }
    }

    public function onReset()
    {
        foreach ($this->queue as $pos)
        {
            if ($this->getBlockData($pos->asVector3()) !== null)
            {
                $id = $this->getBlockData($pos->asVector3());
                $pos->getLevel()->setBlock($pos->asVector3(), Block::get($id));
                $this->removeBlockData($pos);
            }
        }
        $this->ClearQueue();
    }
}
